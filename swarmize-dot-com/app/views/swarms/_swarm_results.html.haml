%p
  %span.huge-number= @total_count
  submissions to this swarm to date.

%h3 Latest Results

%table.table#results_table
  %thead
    %tr
      %th Timestamp
      - for field in @swarm.swarm_fields
        %th= field.field_name
        - if field.derived_field_suffixes
          - field.derived_field_suffixes.each do |df|
            %th= "#{field.field_name} [#{df}]"
  %tbody
    - for row in @rows
      %tr
        %td= format_timestamp(row.timestamp)
        - for field in @swarm.swarm_fields
          - if @current_user || !field.redacted?
            %td= row.send field.field_code
            - if field.derived_field_codes
              - field.derived_field_codes.each do |df|
                %td= row.send df
          - else
            %td Redacted
            - if field.derived_field_codes
              - field.derived_field_codes.each do |df|
                %td Redacted

- if @current_user && (@swarm.live? || @swarm.draft?)
  :javascript
    $(document).ready(function() {
      var ResultsData = Backbone.Model.extend();

      window.resultsData = new ResultsData;

      window.resultsData.set('fieldCodes', #{@swarm.field_codes});

      var ResultsTable = Backbone.View.extend({
        initialize: function() {
          this.listenTo(this.model, 'change', this.render);
        },

        render: function() {
          console.log('rendering');
          var that = this;
          $("#results_table tbody tr").remove();
          $.each(this.model.get('rows'), function(i,item) {
            var $row = $('<tr>');
            $.each(that.model.get('fieldCodes'), function(j, code) {
              if(code == 'timestamp') {
                var rawTime = item[code];
                var formattedTime = formatTimestamp(parseTimestamp(rawTime));
                $row.append(
                  $('<td>').text(formattedTime)
                );
              } else {
                $row.append(
                  $('<td>').text(item[code])
                );
              }
            });
            $("#results_table tbody").append($row);
          });
          $("span.huge-number").text(this.model.get('count'));
        }
      });

      window.resultsTable = new ResultsTable({model: window.resultsData});

      setInterval(function () {
        $.getJSON('#{latest_swarm_path(@swarm, format:'json')}', function(updateData) {
          window.resultsData.set('rows', updateData);
        });

        $.getJSON('#{entrycount_swarm_path(@swarm, format:'json')}', function(updateData) {
          window.resultsData.set('count', updateData);
        });
      }, 5000);
    });
