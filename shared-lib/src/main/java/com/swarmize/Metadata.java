/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.swarmize;  
@SuppressWarnings("all")
/** Metadata about a swarm while it's running though the processing pipeline */
@org.apache.avro.specific.AvroGenerated
public class Metadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Metadata\",\"namespace\":\"com.swarmize\",\"doc\":\"Metadata about a swarm while it's running though the processing pipeline\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"token\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"steps\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The post-processing steps that need to occur on this swarm\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String token;
  /** The post-processing steps that need to occur on this swarm */
  @Deprecated public java.util.List<java.lang.String> steps;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Metadata() {}

  /**
   * All-args constructor.
   */
  public Metadata(java.lang.String name, java.lang.String token, java.util.List<java.lang.String> steps) {
    this.name = name;
    this.token = token;
    this.steps = steps;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return token;
    case 2: return steps;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: token = (java.lang.String)value$; break;
    case 2: steps = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'token' field.
   */
  public java.lang.String getToken() {
    return token;
  }

  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(java.lang.String value) {
    this.token = value;
  }

  /**
   * Gets the value of the 'steps' field.
   * The post-processing steps that need to occur on this swarm   */
  public java.util.List<java.lang.String> getSteps() {
    return steps;
  }

  /**
   * Sets the value of the 'steps' field.
   * The post-processing steps that need to occur on this swarm   * @param value the value to set.
   */
  public void setSteps(java.util.List<java.lang.String> value) {
    this.steps = value;
  }

  /** Creates a new Metadata RecordBuilder */
  public static com.swarmize.Metadata.Builder newBuilder() {
    return new com.swarmize.Metadata.Builder();
  }
  
  /** Creates a new Metadata RecordBuilder by copying an existing Builder */
  public static com.swarmize.Metadata.Builder newBuilder(com.swarmize.Metadata.Builder other) {
    return new com.swarmize.Metadata.Builder(other);
  }
  
  /** Creates a new Metadata RecordBuilder by copying an existing Metadata instance */
  public static com.swarmize.Metadata.Builder newBuilder(com.swarmize.Metadata other) {
    return new com.swarmize.Metadata.Builder(other);
  }
  
  /**
   * RecordBuilder for Metadata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Metadata>
    implements org.apache.avro.data.RecordBuilder<Metadata> {

    private java.lang.String name;
    private java.lang.String token;
    private java.util.List<java.lang.String> steps;

    /** Creates a new Builder */
    private Builder() {
      super(com.swarmize.Metadata.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.swarmize.Metadata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.token)) {
        this.token = data().deepCopy(fields()[1].schema(), other.token);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.steps)) {
        this.steps = data().deepCopy(fields()[2].schema(), other.steps);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Metadata instance */
    private Builder(com.swarmize.Metadata other) {
            super(com.swarmize.Metadata.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.token)) {
        this.token = data().deepCopy(fields()[1].schema(), other.token);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.steps)) {
        this.steps = data().deepCopy(fields()[2].schema(), other.steps);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.swarmize.Metadata.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public com.swarmize.Metadata.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'token' field */
    public java.lang.String getToken() {
      return token;
    }
    
    /** Sets the value of the 'token' field */
    public com.swarmize.Metadata.Builder setToken(java.lang.String value) {
      validate(fields()[1], value);
      this.token = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'token' field has been set */
    public boolean hasToken() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'token' field */
    public com.swarmize.Metadata.Builder clearToken() {
      token = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'steps' field */
    public java.util.List<java.lang.String> getSteps() {
      return steps;
    }
    
    /** Sets the value of the 'steps' field */
    public com.swarmize.Metadata.Builder setSteps(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.steps = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'steps' field has been set */
    public boolean hasSteps() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'steps' field */
    public com.swarmize.Metadata.Builder clearSteps() {
      steps = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Metadata build() {
      try {
        Metadata record = new Metadata();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.token = fieldSetFlags()[1] ? this.token : (java.lang.String) defaultValue(fields()[1]);
        record.steps = fieldSetFlags()[2] ? this.steps : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
